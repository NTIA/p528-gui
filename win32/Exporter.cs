using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;

namespace P528GUI
{
    static class Exporter
    {
        private static void WriteHeader(StreamWriter fs)
        {
            var version = Assembly.GetExecutingAssembly().GetName().Version;
            var dll = FileVersionInfo.GetVersionInfo("p528_x86.dll");

            fs.WriteLine($"Data Generated by the ITS ITU-R Rec P.528-{dll.FileMajorPart} GUI");
            fs.WriteLine($"Generated on {DateTime.Now.ToShortDateString()}");
            fs.WriteLine($"App Version,{version.Major}.{version.Minor}.{version.Build}");
            fs.WriteLine($"P.528-{dll.FileMajorPart} DLL Version,{dll.FileMajorPart}.{dll.FileMinorPart}.{dll.FileBuildPart}");
        }
        
        public static void ExportSingleCurveData(string filepath, CurveData curveData, bool includeModeOfPropagation,
            bool includeFreeSpace, bool isRowAligned)
        {
            using (var fs = new StreamWriter(filepath))
            {
                WriteHeader(fs);

                // Check and print any warnings
                if (curveData.Rtn != 0)
                {
                    fs.WriteLine();

                    if ((curveData.Rtn & Constants.WARNING__DFRAC_TROPO_REGION) == Constants.WARNING__DFRAC_TROPO_REGION)
                        fs.WriteLine(Messages.ModelConsistencyWarning);
                }

                fs.WriteLine();
                fs.WriteLine($"h_1,{curveData.ModelArgs.h_1__user_units}," + ((GlobalState.Units == Units.Meters) ? "meters" : "feet"));
                fs.WriteLine($"h_2,{curveData.ModelArgs.h_2__user_units}," + ((GlobalState.Units == Units.Meters) ? "meters" : "feet"));
                fs.WriteLine($"f__mhz,{curveData.ModelArgs.f__mhz}");
                fs.WriteLine($"time,{curveData.ModelArgs.time}");
                fs.WriteLine($"T_pol,{curveData.ModelArgs.Polarization}");
                fs.WriteLine();

                if (includeModeOfPropagation)
                    fs.WriteLine("Mode of Propagation: 1 = Line-of-Sight; 2 = Diffraction; 3 = Troposcatter\n");

                if (isRowAligned)
                {
                    fs.Write(((GlobalState.Units == Units.Meters) ? "d__km" : "d__n_mile") + ",");
                    fs.WriteLine($"{String.Join(",", curveData.d__user_units)}");
                    fs.WriteLine($"A__db,{String.Join(",", curveData.L_btl__db)}");
                    if (includeFreeSpace)
                        fs.WriteLine($"A_fs__db,{String.Join(",", curveData.L_fs__db)}");
                    if (includeModeOfPropagation)
                        fs.WriteLine($"Mode,{String.Join(",", curveData.PropModes.Select(x => (int)x))}");
                }
                else
                {
                    fs.Write(((GlobalState.Units == Units.Meters) ? "d__km" : "d__n_mile") + ",");
                    fs.Write("A__db");
                    if (includeFreeSpace)
                        fs.Write(",A_fs__db");
                    if (includeModeOfPropagation)
                        fs.Write(",PropMode");
                    fs.WriteLine();

                    for (int i = 0; i < curveData.L_btl__db.Count; i++)
                    {
                        fs.Write($"{curveData.d__user_units[i]},{curveData.L_btl__db[i]}");
                        if (includeFreeSpace)
                            fs.Write($",{curveData.L_fs__db[i]}");
                        if (includeModeOfPropagation)
                            fs.Write($",{(int)curveData.PropModes[i]}");
                        fs.WriteLine();
                    }
                }
            }
        }

        public static void ExportMultipleLowHeightsData(string filepath, List<CurveData> curveDatas, bool isRowAligned)
        {
            using (var fs = new StreamWriter(filepath))
            {
                WriteHeader(fs);

                fs.WriteLine();
                fs.WriteLine($"h_2,{curveDatas[0].ModelArgs.h_2__user_units}," + ((GlobalState.Units == Units.Meters) ? "meters" : "feet"));
                fs.WriteLine($"f__mhz,{curveDatas[0].ModelArgs.f__mhz}");
                fs.WriteLine($"time%,{curveDatas[0].ModelArgs.time}");
                fs.WriteLine();

                if (isRowAligned)
                {
                    fs.Write(((GlobalState.Units == Units.Meters) ? "d__km" : "d__n_mile") + ",");
                    fs.WriteLine($"{String.Join(",", curveDatas[0].d__user_units)}");
                    for (int i = 0; i < curveDatas.Count; i++)
                    {
                        var units = (GlobalState.Units == Units.Meters) ? "meters" : "feet";
                        fs.WriteLine($"h_1 = {curveDatas[i].ModelArgs.h_1__user_units} {units},{String.Join(",", curveDatas[i].L_btl__db)}");
                    }
                }
                else
                {
                    fs.Write((GlobalState.Units == Units.Meters) ? "d__km" : "d__n_mile");
                    for (int i = 0; i < curveDatas.Count; i++)
                    {
                        var units = (GlobalState.Units == Units.Meters) ? "meters" : "feet";
                        fs.Write($",h_1 = {curveDatas[i].ModelArgs.h_1__user_units} {units}");
                    }
                    fs.WriteLine();

                    for (int i = 0; i < curveDatas.Count; i++)
                    {
                        fs.Write($"{curveDatas[0].d__user_units[i]}");
                        for (int j = 0; j < curveDatas.Count; j++)
                            fs.Write($",{curveDatas[j].L_btl__db[i]}");

                        fs.WriteLine();
                    }
                }
            }
        }

        public static void ExportMultipleHighHeightsData(string filepath, List<CurveData> curveDatas, bool isRowAligned)
        {
            using (var fs = new StreamWriter(filepath))
            {
                WriteHeader(fs);

                fs.WriteLine();
                fs.WriteLine($"h_1,{curveDatas[0].ModelArgs.h_1__user_units}," + ((GlobalState.Units == Units.Meters) ? "meters" : "feet"));
                fs.WriteLine($"f__mhz,{curveDatas[0].ModelArgs.f__mhz}");
                fs.WriteLine($"time%,{curveDatas[0].ModelArgs.time}");
                fs.WriteLine();

                if (isRowAligned)
                {
                    fs.Write(((GlobalState.Units == Units.Meters) ? "d__km" : "d__n_mile") + ",");
                    fs.WriteLine($"{String.Join(",", curveDatas[0].d__user_units)}");
                    for (int i = 0; i < curveDatas.Count; i++)
                    {
                        var units = (GlobalState.Units == Units.Meters) ? "meters" : "feet";
                        fs.WriteLine($"h_2 = {curveDatas[i].ModelArgs.h_2__user_units} {units},{String.Join(",", curveDatas[i].L_btl__db)}");
                    }
                }
                else
                {
                    fs.Write((GlobalState.Units == Units.Meters) ? "d__km" : "d__n_mile");
                    for (int i = 0; i < curveDatas.Count; i++)
                    {
                        var units = (GlobalState.Units == Units.Meters) ? "meters" : "feet";
                        fs.Write($",h_2 = {curveDatas[i].ModelArgs.h_2__user_units} {units}");
                    }
                    fs.WriteLine();

                    for (int i = 0; i < curveDatas[0].d__user_units.Count; i++)
                    {
                        fs.Write($"{curveDatas[0].d__user_units[i]}");
                        for (int j = 0; j < curveDatas.Count; j++)
                            fs.Write($",{curveDatas[j].L_btl__db[i]}");

                        fs.WriteLine();
                    }
                }
            }
        }

        public static void ExportMultipleTimesData(string filepath, List<CurveData> curveDatas, bool isRowAligned)
        {
            using (var fs = new StreamWriter(filepath))
            {
                WriteHeader(fs);

                fs.WriteLine();
                fs.WriteLine($"h_1,{curveDatas[0].ModelArgs.h_1__user_units}," + ((GlobalState.Units == Units.Meters) ? "meters" : "feet"));
                fs.WriteLine($"h_2,{curveDatas[0].ModelArgs.h_2__user_units}," + ((GlobalState.Units == Units.Meters) ? "meters" : "feet"));
                fs.WriteLine($"f__mhz,{curveDatas[0].ModelArgs.f__mhz}");
                fs.WriteLine();

                if (isRowAligned)
                {
                    fs.Write(((GlobalState.Units == Units.Meters) ? "d__km" : "d__n_mile") + ",");
                    fs.WriteLine($"{String.Join(",", curveDatas[0].d__user_units)}");
                    for (int i = 0; i < curveDatas.Count; i++)
                        fs.WriteLine($"time = {curveDatas[i].ModelArgs.time} %,{String.Join(",", curveDatas[i].L_btl__db)}");
                }
                else
                {
                    fs.Write((GlobalState.Units == Units.Meters) ? "d__km" : "d__n_mile");
                    for (int i = 0; i < curveDatas.Count; i++)
                        fs.Write($",time = {curveDatas[i].ModelArgs.time} %");
                    fs.WriteLine();

                    for (int i = 0; i < curveDatas[0].d__user_units.Count; i++)
                    {
                        fs.Write($"{curveDatas[0].d__user_units[i]}");
                        for (int j = 0; j < curveDatas.Count; j++)
                            fs.Write($",{curveDatas[j].L_btl__db[i]}");

                        fs.WriteLine();
                    }
                }
            }
        }
    }
}
